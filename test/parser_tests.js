var assert = require("assert"); // node.js core module

var parser = require("../modelleertaal.js").parser; // jison generated parser

// transfor a string into RanDomCasE for testing the parse for case insensitivity
function rAnDOmCaSe(inputString){
    var outString = '';
    for (var i=0; i < inputString.length; i++) {
        if (Math.random() > 0.5) {
            outString += inputString[i].toUpperCase();
        } else {
            outString += inputString[i]
        }
    }
    return outString;
}

describe('modelleertaal.js - Modelleertaal Parser generated by Jison', function(){
    it('parses assignments', function() {
        assert.equal(typeof parser.parse('t=t'),'object');
    })

    it('parses numbers', function() {
        assert.equal(parser.parse('t=3')[0].right.value,'3');
        assert.equal(parser.parse('t=03')[0].right.value,'03');
        assert.equal(parser.parse('t=3,734')[0].right.value,'3,734');
        assert.equal(parser.parse('t=3.734')[0].right.value,'3.734');
        assert.equal(parser.parse('t=3.7e-5')[0].right.value,'3.7e-5');
    })

    it('parses unary operators', function() {
        assert.equal(parser.parse('t=-3')[0].right.operator,'-');
        assert.equal(parser.parse('t=+3')[0].right.operator,'+');
        assert.equal(parser.parse('t=!3')[0].right.operator,'NOT');
        assert.equal(parser.parse('t=niet 3')[0].right.operator,'NOT');
    })

    it('parses math expressions', function() {
        assert.equal(typeof parser.parse('t=t+2*3-5*(6*7)-5^3'),'object');
    })

    it('parses functions', function() {
        assert.equal(parser.parse('t=somefunction(x)')[0].right.func,'somefunction');
    })

    it('parses stop', function() {
        assert.equal(parser.parse('stop')[0].type,'Stop');
    })

    it('parses true and false', function() {
        assert.equal(parser.parse('t = waar')[0].right.type,'True');
        assert.equal(parser.parse('t = onwaar')[0].right.type,'False');
    })


    it('parses if statements', function() {
        assert.equal(parser.parse('als waar dan stop eindals')[0].type,'If');
        assert.equal(parser.parse('als waar dan stop eindals')[0].then[0].type,'Stop');

    })

    it('parses identifiers with numbers in name', function() {
        //console.log((parser.parse('ditiseenvariabele = 0')[0]));
        assert.equal(parser.parse('ditiseenvariabele = 0')[0].left,'ditiseenvariabele');
        assert.equal(parser.parse('dit1 = 0')[0].left,'dit1');
        assert.equal(parser.parse('l33th4x0r = 0')[0].left,'l33th4x0r');
    })

    it('parses keywords case insensitive', function() {

        // make RanDomCasE strings and test
        for (i = 0; i < 20; i++) {
            assert.equal(parser.parse(rAnDOmCaSe('t = waar'))[0].right.type,'True');
            assert.equal(parser.parse(rAnDOmCaSe('t = onwaar'))[0].right.type,'False');
            assert.equal(parser.parse(rAnDOmCaSe('als waar dan stop eindals'))[0].type,'If');
            assert.equal(parser.parse(rAnDOmCaSe('als waar dan stop eindals'))[0].then[0].type,'Stop');
        }
    })

    it('parses identifiers case sensitive', function() {
        //console.log((parser.parse('ditiseenvariabele = 0')[0]));
        assert.notEqual(parser.parse('ditiseeNvariabele = 0')[0].left,'ditiseenvariabele');
        assert.equal(parser.parse('DitT1 = 0')[0].left,'DitT1');
        assert.equal(parser.parse('DitT1abcD = 0')[0].left,'DitT1abcD');
    })

    it('parses names with parts of keywords in the name', function() {
        //console.log((parser.parse('ditiseenvariabele = 0')[0]));
        assert.equal(parser.parse('ditstop = 0')[0].left,'ditstop');
        assert.equal(parser.parse('nietwaar = 0')[0].left,'nietwaar');
    })

    it('parses names with { } [ ] | and _ in names', function() {
        assert.equal(parser.parse('t_0\[\]\{\}\| = 0')[0].left,'t_0\[\]\{\}\|');
    })

});

describe('modelleertaal.js - Patched parser injects line numbers into AST', function(){
    it('injects line numbers', function() {
        assert.equal(parser.parse('t=t+3')[0].lineNo, 1);
        assert.equal(parser.parse('t=t+3')[0].right.lineNo, 1);
        assert.equal(parser.parse('\n\nt=t+3')[0].lineNo, 3);
    })
});
