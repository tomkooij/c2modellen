import re
import glob
import shutil


FOLDER_PREFIX = 'modellen/'
MODELS_JS = 'models.js'

def maak_eerste_letter_hoofdletter(s):
    """maak van de eerste letter een hoofdletter"""
    return s[0].upper()+s[1:]


def fn_to_path(fn):
    """maak van een filename een path

    modelnaam.xml ->> modellen/modelnaam.xml

    """
    return FOLDER_PREFIX + fn


def write_models_js(modellen, outfile_fn=MODELS_JS):
    """schrijf models_js"""

    print(f'writing to: {outfile_fn}')
    with open(outfile_fn, 'w') as outfile:
        outfile.write('// models.js generated by update_model_js.py. EDIT WITH CAUTION!\n')
        outfile.write('var model_index = [\n')
        for path, titel in sorted(modellen.items(), key =
                 lambda kv:(kv[1], kv[0])):
            outfile.write('\t\t{' + f'title: "{titel}",' + f' url: "{path}"' + '},\n')
            pass
        outfile.write('];')

def read_models_js(models_js=MODELS_JS):
    modellen = {}
    bestanden_in_models_js = []

    with open(models_js) as f:
        for line in f.readlines():
            match = re.findall("[\"|'](.[^'|\"]*)[\"|']", line)
            if match:
                titel, path = match
                _, fn = path.split('/')
                modellen[path] = titel
                bestanden_in_models_js.append(fn)


    return modellen, bestanden_in_models_js

def main():

    modellen, bestanden_in_models_js = read_models_js()

    bestanden_in_folder = glob.glob('*.xml')

    # skip missing/removed xml files (delete from models.js)
    for fn in bestanden_in_models_js:
        if fn not in bestanden_in_folder:
            print(f'file not found: {fn}: skipping.')
            del modellen[fn_to_path(fn)]

    # rename files with spaces, add new files to models.js
    for fn in bestanden_in_folder:
        if " " in fn:
            fn_new = fn.replace(' ', '_')
            fn_new = maak_eerste_letter_hoofdletter(fn_new)
            print(f'rename: {fn} -> {fn_new}')
            shutil.move(fn, fn_new)
            fn = fn_new
        if fn not in bestanden_in_models_js:
            print(f'new file: {fn}')
            assert fn[-4:] == '.xml', 'ABORT: filename != *.xml'
            path = fn_to_path(fn)

            # default titel = bestandsnaam zonder .xml
            titel = maak_eerste_letter_hoofdletter(fn.replace('_', ' '))
            titel = titel[:-4]  # remove '.xml'
            modellen[path] = titel

    write_models_js(modellen)


if __name__ == '__main__':
    main()
